// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  displayName String?
  avatar      String?
  bio         String?  @db.Text
  location    String?
  website     String?
  status      String   @default("offline")
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       String[] @default([])

  // Relations
  sentMessages     Message[]         @relation("MessageSender")
  chatMemberships  ChatMember[]
  messageReactions MessageReaction[]
  messageEdits     MessageEdit[]
  deletedMessages  Message[] @relation("MessageDeletions")
  ownedGroups      Chat[]            @relation("GroupOwner")
  downloadLogs     DownloadLog[]

  @@map("users")
}

model Chat {
  id          String    @id @default(cuid())
  name        String?
  type        ChatType
  avatar      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastMessage DateTime?

  directKey  String?      @unique
  // Relations
  messages Message[]
  members  ChatMember[]
  owner    User?        @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId  String?

  @@map("chats")
}

model ChatMember {
  id       String     @id @default(cuid())
  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  @@unique([userId, chatId])
  @@map("chat_members")
}

model Message {
  id        String        @id @default(cuid())
  content   String
  type      MessageType   @default(TEXT)
  status    MessageStatus @default(SENT)
  replyToId String?

  // Code-specific fields
  language String?
  filename String?
  lines    Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime?

  // Relations
  sender      User              @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  chat        Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  replyTo     Message?          @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[]         @relation("MessageReplies")
  attachments Attachment[]
  reactions   MessageReaction[]
  edits       MessageEdit[]
  deletedFor  User[]   @relation("MessageDeletions")

  @@map("messages")
}

model Attachment {
  id             String   @id @default(cuid())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  url            String
  thumbnail      String?
  storageProvider String?  @default("supabase")  
  storageBucket  String?   
  storageKey     String?   
  createdAt      DateTime  @default(now())

  // Relations
  message      Message?     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId    String?
  downloadLogs DownloadLog[]

  @@map("attachments")
}

model MessageReaction {
  id        String   @id @default(cuid())
  reaction  String // emoji or reaction type
  createdAt DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@unique([userId, messageId, reaction])
  @@map("message_reactions")
}

model MessageEdit {
  id         String   @id @default(cuid())
  oldContent String
  newContent String
  editedAt   DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@map("message_edits")
}

// Enums
enum ChatType {
  DIRECT
  GROUP
}

enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  CODE
  FILE
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model DownloadLog {
  id        String   @id @default(cuid())
  fileId    String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  file Attachment @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([fileId])
  @@index([userId])
  @@map("download_logs")
}